import Data.List
main :: IO ()
main = interact solucion

solucion = undefined

leeEntrada = map words . lines


escribeSalida :: (Eq a1, Eq a, Foldable t) => [(t1, t a2, [(a1, a)])] -> String
escribeSalida [] = ""
escribeSalida (x:xs) = tipoFuncion x ++ escribeSalida xs



-- λ> dominio ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- [1,2,3,4,5]

dominio :: (t, t1, t2) -> t
dominio (xs,_,_) = xs

-- λ> recorrido ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- [1,4,16]

recorrido :: (t, t1, t2) -> t1
recorrido (_,ys,_) = ys

-- λ> imagenes ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- [(1,1),(2,4),(4,16)]

imagenes :: (t, t1, t2) -> t2
imagenes (_,_,zs) = zs

-- λ> esFuncion ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- True

esFuncion :: Eq b => (t, t1, [(b, b1)]) -> Bool
esFuncion xs = map fst (imagenes xs) == nub (map (fst) (imagenes xs))

-- λ> esInyectiva ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- True

esInyectiva :: Eq b => (t, t1, [(a, b)]) -> Bool
esInyectiva xs = map snd (imagenes xs) == nub ( map snd (imagenes xs))


-- λ> esSobreyectiva ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- True

esSobreyectiva :: Foldable t => (t1, t a2, [(a1, a)]) -> Bool
esSobreyectiva xs = length (map snd (imagenes xs)) == length (recorrido xs)


-- λ> tipoFuncion ([1,2,3,4,5],[1,4,16],[(1,1),(2,4),(4,16)])
-- "bijective \n"

tipoFuncion :: (Eq a1, Eq a, Foldable t) => (t1, t a2, [(a1, a)]) -> String
tipoFuncion xs | not (esFuncion xs) = "not a function \n"
               | esInyectiva xs && esSobreyectiva xs = "bijective \n"
               | esInyectiva xs = "injective \n"
               | esSobreyectiva xs = "surjective \n"
               | otherwise = "neither injective nor surjective \n"
